function [y,z,current_obj,x_pred,err_count,t_orig_end] = eq14(label,n_sample,...
    b_ind,...
    dL,...
    db,...
    rho,...
    y_initial_scale,...
    z_initial_scale,...
    y_iii,...
    z_iii)
%EQ14 Summary of this function goes here
%   Detailed explanation goes here

%% LP settings
options=optimoptions('linprog','Algorithm','interior-point','display','none'); % linear program (LP) setting for Frank-Wolfe algorithm
options.OptimalityTolerance=1e-5; % LP optimality tolerance
options.ConstraintTolerance=1e-5; % LP interior-point constraint tolerance
% rho=1e-5; % PSD tol

t_orig=tic;

%% initialize a psd matrix ABL
rng(0);
y_0=ones(n_sample,1);
y=[y_0;sum(y_0)]*y_initial_scale; % initialize y
% y=y_iii;

b_ind_logical=zeros(n_sample,1);
b_ind_logical(b_ind)=1;
rng(0);
z_skeleton=ones(n_sample,1).*b_ind_logical*z_initial_scale;
z=z_skeleton(b_ind_logical==1); % initialize z

z_skeleton(b_ind_logical==1)=z;

ABL=diag(y)+...
    [zeros(n_sample) z_skeleton;z_skeleton' 0]+...
    -dL; % initialize ABL

rng(0);
fv_ABL=randn(n_sample+1,1);

initial_obj=sum(y)+db'*z_iii;
disp(['Eq. same label GDA LP main iteration ' num2str(0) ' | current obj: ' num2str(initial_obj) ' | mineig: ' num2str(min(eig(ABL)))]);

tol_set=1e-5;
tol=Inf;
loop_i=0;
while tol>tol_set
    if loop_i==0
        
        [fv_ABL,...
            scaled_M,...
            scaled_factors] = ...
            compute_scalars(...
            ABL,...
            fv_ABL); % compute scalars
        
        scaled_M_offdia=scaled_M;
        scaled_M_offdia(1:n_sample+1+1:end)=0;
        leftEnds=diag(ABL)-sum(abs(scaled_M_offdia),2);
        leftEnds_diff=sum(abs(leftEnds-mean(leftEnds)));
        disp(['Eq. same label before LP LeftEnds mean: ' num2str(mean(leftEnds)) ' | LeftEnds difference: ' num2str(leftEnds_diff)]);
    end
    [y,z,current_obj]=LP_core_eq14( ...
        n_sample,...
        scaled_M,...
        scaled_factors,...
        rho,...
        db,...
        options,...
        -dL,...
        b_ind);
    
    z_skeleton(b_ind_logical==1)=z;
    ABL=diag(y)+...
        [zeros(n_sample) z_skeleton;z_skeleton' 0]+...
        -dL; % initialize ABL
    [fv_ABL,...
        scaled_M,...
        scaled_factors] = ...
        compute_scalars(...
        ABL,...
        fv_ABL); % compute scalars
    scaled_M_offdia=scaled_M;
    scaled_M_offdia(1:n_sample+1+1:end)=0;
    leftEnds=diag(ABL)-sum(abs(scaled_M_offdia),2);
    leftEnds_diff=sum(abs(leftEnds-mean(leftEnds)));
    disp(['Eq. same label after LP LeftEnds mean: ' num2str(mean(leftEnds)) ' | LeftEnds difference: ' num2str(leftEnds_diff)]);
    
    disp(['obj ' num2str(current_obj)]);
    tol=norm(current_obj-initial_obj);
    initial_obj=current_obj;
    loop_i=loop_i+1;
end

t_orig_end=toc(t_orig);

fv_H_0=randn(n_sample+1,1);

[fv_H,~] = ...
    lobpcg_fv(...
    fv_H_0,...
    ABL,...
    1e-4,...
    200);

x_val = sign(label(b_ind(1))*sign(fv_H(1)))*sign(fv_H(1:n_sample));
% x_val = sign(fv_H(1:n_sample));
x_pred=x_val;
err_count = sum(abs(sign(x_val) - label))/2;

end

